
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ArrowDownCircle, ArrowUpCircle, Wallet, Shield, AlertTriangle, Lock } from "lucide-react";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { useToast } from "@/hooks/use-toast";
import { Slider } from "@/components/ui/slider";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { SecureTransaction } from "@/components/market/types";

interface TokenTradeFormProps {
  tokenSymbol: string;
  isConnected: boolean;
  walletAddress?: string;
}

export const TokenTradeForm = ({
  tokenSymbol,
  isConnected,
  walletAddress,
}: TokenTradeFormProps) => {
  const [amount, setAmount] = useState<string>("");
  const [tradeType, setTradeType] = useState<"buy" | "sell">("buy");
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const [securityLevel, setSecurityLevel] = useState<number>(2); // 0-3: Low, Medium, High, Maximum
  const [gasPrice, setGasPrice] = useState<string>("5");
  const [securityScore, setSecurityScore] = useState<number>(70);
  const [transactions, setTransactions] = useState<SecureTransaction[]>([]);
  const [showAdvanced, setShowAdvanced] = useState<boolean>(false);
  const [slippageTolerance, setSlippageTolerance] = useState<number>(0.5);
  const { toast } = useToast();

  // Calculate security score based on settings
  useEffect(() => {
    const baseScore = 50;
    const securityBonus = securityLevel * 10;
    const slippagePenalty = slippageTolerance > 1 ? (slippageTolerance - 1) * 5 : 0;
    const calculatedScore = Math.min(100, Math.max(0, baseScore + securityBonus - slippagePenalty));
    setSecurityScore(calculatedScore);
  }, [securityLevel, slippageTolerance]);

  const validateTransaction = (amount: string): boolean => {
    // Implement transaction validation
    if (!amount || isNaN(Number(amount)) || Number(amount) <= 0) {
      toast({
        title: "Invalid Amount",
        description: "Please enter a valid amount",
        variant: "destructive",
      });
      return false;
    }
    
    if (!isConnected) {
      toast({
        title: "Wallet Not Connected",
        description: "Please connect your wallet to execute trades",
        variant: "destructive",
      });
      return false;
    }
    
    // Add more security validations as needed
    return true;
  };

  const generateTransactionHash = (): string => {
    // In a real app, this would be generated by the blockchain
    return "0x" + Array(64).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join("");
  };

  const simulateGasEstimation = (): string => {
    // Simulate gas estimation based on security level and network congestion
    const baseFee = parseFloat(gasPrice);
    const securityMultiplier = 1 + (securityLevel * 0.15);
    return (baseFee * securityMultiplier).toFixed(2);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateTransaction(amount)) {
      return;
    }
    
    setIsProcessing(true);
    
    try {
      // Additional security delay for higher security levels
      const securityDelay = securityLevel * 500;
      
      // Simulate transaction preparation process
      toast({
        title: "Preparing Transaction",
        description: "Validating and preparing secure transaction...",
      });
      
      // Security level affects transaction processing
      setTimeout(() => {
        // Generate mock transaction
        const newTransaction: SecureTransaction = {
          hash: generateTransactionHash(),
          nonce: transactions.length,
          from: walletAddress || "",
          to: "0x" + Array(40).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join(""),
          value: amount,
          data: `${tradeType === "buy" ? "Transfer" : "Receive"} ${amount} ${tokenSymbol}`,
          signature: "0x" + Array(128).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join(""),
          status: 'pending',
          timestamp: Date.now(),
          gasLimit: "21000",
          gasPrice: simulateGasEstimation(),
        };
        
        setTransactions([newTransaction, ...transactions]);
        
        toast({
          title: "Transaction Submitted",
          description: `${tradeType === "buy" ? "Buy" : "Sell"} transaction for ${amount} ${tokenSymbol} submitted securely`,
        });
        
        // Simulate transaction confirmation
        setTimeout(() => {
          setTransactions(prevTx => 
            prevTx.map(tx => 
              tx.hash === newTransaction.hash 
                ? {...tx, status: 'confirmed'} 
                : tx
            )
          );
          
          toast({
            title: "Transaction Confirmed",
            description: `Your ${tradeType === "buy" ? "purchase" : "sale"} of ${amount} ${tokenSymbol} was successful`,
            variant: "default",
          });
          
          setAmount("");
          setIsProcessing(false);
        }, 3000);
        
      }, 1000 + securityDelay);
    } catch (error) {
      console.error("Error executing trade:", error);
      toast({
        title: "Transaction Failed",
        description: "Failed to execute the transaction. Please try again.",
        variant: "destructive",
      });
      setIsProcessing(false);
    }
  };

  const securityLevelNames = ["Low", "Medium", "High", "Maximum"];

  return (
    <Card className="p-4 bg-secondary/20 backdrop-blur-xl border border-white/10">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          {tradeType === "buy" ? (
            <ArrowUpCircle className="h-5 w-5 text-green-500" />
          ) : (
            <ArrowDownCircle className="h-5 w-5 text-red-500" />
          )}
          <h3 className="font-medium">Secure {tokenSymbol} Trading</h3>
        </div>
        
        <div className="flex items-center gap-2">
          <Shield className={`h-4 w-4 ${
            securityScore >= 90 ? "text-green-500" : 
            securityScore >= 70 ? "text-blue-500" : 
            securityScore >= 40 ? "text-yellow-500" : 
            "text-red-500"
          }`} />
          <span className="text-xs font-medium">Security: {securityScore}/100</span>
        </div>
      </div>
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <Label>Trade Type</Label>
          <RadioGroup
            value={tradeType}
            onValueChange={(value) => setTradeType(value as "buy" | "sell")}
            className="flex space-x-4"
          >
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="buy" id="buy" />
              <Label htmlFor="buy" className="flex items-center space-x-2 cursor-pointer">
                <ArrowUpCircle className="w-4 h-4 text-green-500" />
                <span>Buy</span>
              </Label>
            </div>
            
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="sell" id="sell" />
              <Label htmlFor="sell" className="flex items-center space-x-2 cursor-pointer">
                <ArrowDownCircle className="w-4 h-4 text-red-500" />
                <span>Sell</span>
              </Label>
            </div>
          </RadioGroup>
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="amount">Amount</Label>
          <Input
            id="amount"
            type="number"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            placeholder={`Enter ${tokenSymbol} amount...`}
            disabled={!isConnected || isProcessing}
            className="bg-background/50"
          />
        </div>
        
        <div className="space-y-2 pt-2 border-t border-white/10">
          <div className="flex items-center justify-between">
            <Label htmlFor="security-level" className="flex items-center gap-1">
              <Shield className="h-4 w-4" />
              <span>Security Level: {securityLevelNames[securityLevel]}</span>
            </Label>
            <Button 
              type="button" 
              variant="ghost" 
              size="sm" 
              onClick={() => setShowAdvanced(!showAdvanced)}
              className="text-xs"
            >
              {showAdvanced ? "Hide" : "Show"} Advanced
            </Button>
          </div>
          
          <Slider
            id="security-level"
            value={[securityLevel]}
            min={0}
            max={3}
            step={1}
            onValueChange={(value) => setSecurityLevel(value[0])}
          />
          
          <div className="grid grid-cols-4 gap-1 text-xs mt-1">
            {securityLevelNames.map((name, i) => (
              <div 
                key={name} 
                className={`text-center ${i === securityLevel ? "font-bold" : "text-muted-foreground"}`}
              >
                {name}
              </div>
            ))}
          </div>
        </div>
        
        {showAdvanced && (
          <div className="space-y-3 p-3 rounded-md bg-secondary/10">
            <div className="space-y-2">
              <Label htmlFor="slippage" className="flex items-center justify-between">
                <span>Slippage Tolerance: {slippageTolerance}%</span>
              </Label>
              <Slider
                id="slippage"
                value={[slippageTolerance]}
                min={0.1}
                max={5}
                step={0.1}
                onValueChange={(value) => setSlippageTolerance(value[0])}
              />
              {slippageTolerance > 1 && (
                <Alert variant="warning" className="py-2 text-xs">
                  <AlertTriangle className="h-3 w-3" />
                  <AlertDescription>
                    High slippage tolerance reduces security. Consider lowering for better protection.
                  </AlertDescription>
                </Alert>
              )}
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="gas-price" className="flex items-center justify-between">
                <span>Gas Price (Gwei): {gasPrice}</span>
                <span className="text-xs text-muted-foreground">Estimated: {simulateGasEstimation()}</span>
              </Label>
              <Input
                id="gas-price"
                type="number"
                value={gasPrice}
                onChange={(e) => setGasPrice(e.target.value)}
                className="bg-background/50"
              />
            </div>
          </div>
        )}
        
        {!isConnected && (
          <div className="text-center text-sm text-muted-foreground">
            <Wallet className="h-4 w-4 mx-auto mb-2" />
            Connect wallet to trade tokens securely
          </div>
        )}
        
        <Button
          type="submit"
          className={`w-full ${
            tradeType === "buy" 
              ? "bg-green-500 hover:bg-green-600" 
              : "bg-red-500 hover:bg-red-600"
          }`}
          disabled={!isConnected || isProcessing}
        >
          <Lock className="w-4 h-4 mr-2" />
          {isProcessing ? (
            "Processing Securely..."
          ) : (
            `Securely ${tradeType === "buy" ? "Buy" : "Sell"} ${tokenSymbol}`
          )}
        </Button>
        
        {transactions.length > 0 && (
          <div className="mt-4 pt-4 border-t border-white/10">
            <h4 className="text-sm font-medium mb-2">Recent Transactions</h4>
            <div className="space-y-2 max-h-40 overflow-y-auto">
              {transactions.slice(0, 3).map((tx, index) => (
                <div key={index} className="text-xs p-2 rounded bg-secondary/20 flex justify-between">
                  <div>
                    <span className="font-mono">{tx.hash.substring(0, 8)}...{tx.hash.substring(tx.hash.length - 6)}</span>
                    <div className="text-muted-foreground mt-1">{tx.data}</div>
                  </div>
                  <div className="flex items-center">
                    <div className={`px-2 py-0.5 rounded-full text-xs ${
                      tx.status === 'confirmed' ? 'bg-green-500/20 text-green-400' : 
                      tx.status === 'failed' ? 'bg-red-500/20 text-red-400' : 
                      'bg-yellow-500/20 text-yellow-400'
                    }`}>
                      {tx.status}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </form>
    </Card>
  );
};
