
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.21.0";

// CORS headers
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Sample agents for testing
const sampleAgents = [
  {
    id: "trader-alpha",
    name: "Alpha Trader",
    description: "Specialized in momentum-based trading strategies",
    type: "trader",
    status: "active",
    lastActive: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    tradingStyle: "momentum",
    performance: {
      successRate: 78,
      tradeCount: 142,
      winLossRatio: 2.8
    },
    tasks: {
      pending: 2,
      completed: 8
    }
  },
  {
    id: "analyst-beta",
    name: "Beta Analyst",
    description: "Expert in fundamental analysis of global markets",
    type: "analyst",
    status: "active",
    lastActive: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    specialization: "fundamentals",
    performance: {
      successRate: 85,
      tasksCompleted: 56
    },
    tasks: [
      "Review Q3 earnings reports",
      "Update economic forecasts",
      "Analyze market sentiment trends"
    ]
  },
  {
    id: "pm-gamma",
    name: "Gamma Portfolio Manager",
    description: "Balanced portfolio management with risk mitigation focus",
    type: "portfolio_manager",
    status: "paused",
    lastActive: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    tradingStyle: "balanced",
    performance: {
      successRate: 92,
      tasksCompleted: 127
    },
    tasks: {
      pending: 1,
      completed: 12
    }
  }
];

// Handle requests
serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, {
      headers: corsHeaders,
    });
  }

  try {
    const { action, ...params } = await req.json();
    
    console.log(`Agent communication - Action: ${action}`, params);
    
    // All responses should follow this structure
    let responseData = {
      success: true,
      message: "",
    };
    
    // Handle different actions
    switch (action) {
      case "list_agents":
        responseData = { ...responseData, agents: sampleAgents };
        break;
        
      case "update_agent_status":
        const { agentId, status } = params;
        console.log(`Updating agent ${agentId} status to ${status}`);
        
        // In a real implementation, this would update a database
        // For now, just return success
        responseData = { 
          ...responseData, 
          success: true,
          message: `Agent ${agentId} status updated to ${status}`
        };
        break;
        
      case "collaborative_analysis":
        const { ticker, timeframe, agentTypes } = params;
        console.log(`Generating collaborative analysis for ${ticker} over ${timeframe}`);
        
        // Simulate generating an analysis
        const analysisText = `
        # Collaborative Analysis for ${ticker.toUpperCase()}
        
        ## Market Overview
        The ${ticker.toUpperCase()} asset shows strong momentum in recent trading sessions with heightened volatility.
        
        ## Technical Signals
        - Moving Average Convergence: Positive
        - Relative Strength: Moderate (62)
        - Volume Pattern: Above average with increasing buy pressure
        
        ## Risk Assessment
        Current market conditions suggest a moderate risk profile for ${ticker.toUpperCase()}.
        
        ## Consensus Recommendation
        Based on collaborative analysis across ${agentTypes.join(", ")} agents:
        - Short-term outlook: Bullish
        - Medium-term outlook: Neutral to Bullish
        - Position sizing: 3-5% of portfolio
        
        *Generated by Alpha Trader, Beta Analyst and Gamma Portfolio Manager*
        `;
        
        responseData = { 
          ...responseData, 
          analysis: analysisText
        };
        break;
        
      case "generate_recommendation":
        const { ticker: recTicker, agentId } = params;
        
        // Simulate a recommendation
        const actionOptions = ["BUY", "SELL", "HOLD"];
        const randomAction = actionOptions[Math.floor(Math.random() * actionOptions.length)];
        const confidence = Math.floor(Math.random() * 30) + 70; // 70-99
        
        responseData = {
          ...responseData,
          recommendation: {
            agentId,
            action: randomAction,
            ticker: recTicker,
            confidence,
            reasoning: `Based on current market conditions, a ${randomAction} position on ${recTicker} appears favorable.`,
            timestamp: new Date().toISOString(),
            price: 100 + Math.random() * 50
          }
        };
        break;
        
      default:
        throw new Error(`Unknown action: ${action}`);
    }
    
    // Return the response
    return new Response(JSON.stringify(responseData), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 200,
    });
  } catch (error) {
    console.error("Error in agent-communication function:", error);
    
    return new Response(JSON.stringify({ 
      success: false, 
      message: error.message || "An error occurred during agent communication" 
    }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 500,
    });
  }
});
